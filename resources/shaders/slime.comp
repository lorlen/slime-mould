#version 460 core

#define PI 3.1415926538

#define X 1
#define Y 1
#define Z 1

layout(local_size_x = X, local_size_y = Y, local_size_z = Z) in;

struct Agent {
    vec2 position;
    float angle;
    int species_index;
    ivec4 species_mask;
};

struct SpeciesSettings {
    float move_speed;
    float turn_speed;

    float sensor_angle_degrees;
    float sensor_offset_dst;
    vec4 color;
    int sensor_size;
};

layout(std430, binding = 0) buffer agent_buf {
    Agent agents[];
};

layout(std430, binding = 1) buffer settings_buf {
    SpeciesSettings species_settings[];
};

layout(rgba8, binding = 0) restrict uniform image2D trail_map;

uniform float time;
uniform float frame_time;
uniform float trail_weight;

// Source: www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scale_to_01(uint num) {
    return float(num) / 4294967295.0;
}

float sense(Agent agent, SpeciesSettings settings, float sensor_angle_offset, vec2 size) {
    float sensor_angle = agent.angle + sensor_angle_offset;
    vec2 sensor_dir = vec2(cos(sensor_angle), sin(sensor_angle));
    ivec2 sensor_center = ivec2(agent.position + sensor_dir * settings.sensor_offset_dst);
    ivec4 sense_weight = agent.species_mask * 2 - 1;
    float sum = 0;

    for (int offset_x = -settings.sensor_size; offset_x <= settings.sensor_size; offset_x++) {
        for (int offset_y = -settings.sensor_size; offset_y <= settings.sensor_size; offset_y++) {
            ivec2 pos = sensor_center + ivec2(offset_x, offset_y);

            if (pos.x >= 0 && pos.x < size.x && pos.y >= 0 && pos.y < size.y) {
                sum += dot(sense_weight, imageLoad(trail_map, pos));
            }
        }
    }

    return sum;
}

void main() {
    if (gl_GlobalInvocationID.x >= agents.length())
        return;

    vec2 size = imageSize(trail_map);

    Agent agent = agents[gl_GlobalInvocationID.x];
    SpeciesSettings settings = species_settings[agent.species_index];

    uint random = hash(uint(agent.position.y * size.x + agent.position.x))
                + hash(uint(gl_GlobalInvocationID.x + time * 100000));
    float random01 = scale_to_01(random);

    float sensor_angle_rad = radians(settings.sensor_angle_degrees);
    float weight_forward = sense(agent, settings, 0, size);
    float weight_left = sense(agent, settings, sensor_angle_rad, size);
    float weight_right = sense(agent, settings, -sensor_angle_rad, size);

    float turn_speed = settings.turn_speed * 2 * PI;

    if (weight_forward > weight_left && weight_forward > weight_right) {}
    else if (weight_forward < weight_left && weight_forward < weight_right) {
        agents[gl_GlobalInvocationID.x].angle = (random01 - 0.5) * 2 * turn_speed * frame_time;
    } else if (weight_left < weight_right) {
        agents[gl_GlobalInvocationID.x].angle -= random01 * turn_speed * frame_time;
    } else if (weight_left > weight_right) {
        agents[gl_GlobalInvocationID.x].angle += random01 * turn_speed * frame_time;
    }

    vec2 direction = vec2(cos(agent.angle), sin(agent.angle));
    vec2 new_pos = agent.position + direction * settings.move_speed * frame_time;

    if (new_pos.x < 0 || new_pos.x >= size.x || new_pos.y < 0 || new_pos.y >= size.y) {
        new_pos = clamp(new_pos, vec2(0), size - 1);
        agents[gl_GlobalInvocationID.x].angle = random01 * 2 * PI;
    } else {
        ivec2 coords = ivec2(new_pos);
        vec4 old_trail = imageLoad(trail_map, coords);
        imageStore(trail_map, coords, min(vec4(1), old_trail + vec4(agent.species_mask) * trail_weight * frame_time));
    }

    agents[gl_GlobalInvocationID.x].position = new_pos;
}
