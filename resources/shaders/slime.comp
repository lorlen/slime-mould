#version 460 core

#define PI 3.1415926538

#define X 1
#define Y 1
#define Z 1

layout(local_size_x = X, local_size_y = Y, local_size_z = Z) in;

struct Agent {
    vec2 position;
    float angle;
};

layout(std430, binding = 0) buffer agent_buf {
    Agent agents[];
};

layout(rgba8, location = 0) restrict uniform image2D trail_map;
uniform float time;
uniform float frame_time;
uniform float speed;

// Source: www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scale_to_01(uint num) {
    return float(num) / 4294967295.0;
}

void main() {
    if (gl_GlobalInvocationID.x >= agents.length())
        return;

    vec2 size = imageSize(trail_map);

    Agent agent = agents[gl_GlobalInvocationID.x];
    uint random = hash(uint(agent.position.y * size.x + agent.position.x))
                + hash(uint(gl_GlobalInvocationID.x + time * 100000));

    vec2 direction = vec2(cos(agent.angle), sin(agent.angle));
    vec2 new_pos = agent.position + direction * speed * frame_time;

    if (new_pos.x < 0 || new_pos.x >= size.x || new_pos.y < 0 || new_pos.y > size.y) {
        new_pos = clamp(new_pos, vec2(0), size - 0.01);
        agents[gl_GlobalInvocationID.x].angle = scale_to_01(random) * 2 * PI;
    }

    agents[gl_GlobalInvocationID.x].position = new_pos;
    imageStore(trail_map, ivec2(new_pos), vec4(1));
}
